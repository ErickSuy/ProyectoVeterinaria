var Prototype = {
    Version: "1.6.1",
    Browser: (function () {
        var B = navigator.userAgent;
        var A = Object.prototype.toString.call(window.opera) == "[object Opera]";
        return {
            IE: !!window.attachEvent && !A,
            Opera: A,
            WebKit: B.indexOf("AppleWebKit/") > -1,
            Gecko: B.indexOf("Gecko") > -1 && B.indexOf("KHTML") === -1,
            MobileSafari: /Apple.*Mobile.*Safari/.test(B)
        }
    })(),
    BrowserFeatures: {/**/
        ElementExtensions: (function () {
            var A = window.Element || window.HTMLElement;
            return !!(A && A.prototype)
        })(),
        SpecificElementExtensions: (function () {
            if (typeof window.HTMLDivElement !== "undefined") {
                return true
            }
            var C = document.createElement("div");
            var B = document.createElement("form");
            var A = false;
            if (C.__proto__ && (C.__proto__ !== B.__proto__)) {
                A = true
            }
            C = B = null;
            return A
        })()
    },
    emptyFunction: function () {/**/
    },
    K: function (A) {
        return A
    }
};


var Class = (function () {/**/
    function A() {
    }

    function B() {/**/
        var G = null, F = $A(arguments);
        if (Object.isFunction(F[0])) {
            G = F.shift()
        }
        function D() {
            this.initialize.apply(this, arguments)
        }

        Object.extend(D, Class.Methods);
        D.superclass = G;
        D.subclasses = [];
        if (G) {
            A.prototype = G.prototype;
            D.prototype = new A;
            G.subclasses.push(D)
        }
        for (var E = 0; E < F.length; E++) {
            D.addMethods(F[E])
        }
        if (!D.prototype.initialize) {
            D.prototype.initialize = Prototype.emptyFunction
        }
        D.prototype.constructor = D;
        return D
    }

    function C(J) {/**/
        var F = this.superclass && this.superclass.prototype;
        var E = Object.keys(J);
        if (!Object.keys({toString: true}).length) {
            if (J.toString != Object.prototype.toString) {
                E.push("toString")
            }
            if (J.valueOf != Object.prototype.valueOf) {
                E.push("valueOf")
            }
        }
        for (var D = 0, G = E.length; D < G; D++) {
            var I = E[D], H = J[I];
            if (F && Object.isFunction(H) && H.argumentNames().first() == "$super") {
                var K = H;
                H = (function (L) {
                    return function () {
                        return F[L].apply(this, arguments)
                    }
                })(I).wrap(K);
                H.valueOf = K.valueOf.bind(K);
                H.toString = K.toString.bind(K)
            }
            this.prototype[I] = H
        }
        return this
    }

    return {
        create: B,
        Methods: {addMethods: C} /**/
    }
})();

(function () {
    var D = Object.prototype.toString;

    function I(Q, S) { /**/
        for (var R in S) {
            Q[R] = S[R]
        }
        return Q
    }

    function O(Q) {/**/
        var R = [];
        for (var S in Q) {
            R.push(S)
        }
        return R
    }

    function J(Q) {/**/
        return I({}, Q)
    }

    function G(Q) {/**/
        return D.call(Q) == "[object Array]"
    }

    function P(Q) {/**/
        return Q instanceof Hash
    }

    function B(Q) {/**/
        return typeof Q === "function"
    }

    function A(Q) { /**/
        return D.call(Q) == "[object String]"
    }

    function E(Q) { /**/
        return typeof Q === "undefined"
    }

    I(Object, {
        extend: I, /**/
        keys: O,
        clone: J,/**/
        isArray: G,/**/
        isHash: P, /**/
        isFunction: B,/**/
        isString: A, /**/
        isUndefined: E /**/
    })
})();

Object.extend(Function.prototype, (function () {
    var K = Array.prototype.slice;

    function D(O, L) {
        var N = O.length, M = L.length;
        while (M--) {
            O[N + M] = L[M]
        }
        return O
    }

    function I(M, L) {
        M = K.call(M, 0);
        return D(M, L)
    }

    function J() {/**/
        if (!arguments.length) {
            return this
        }
        var L = this, M = K.call(arguments, 0);
        return function () {
            var N = I(M, arguments);
            return L.apply(this, N)
        }
    }

    function B() { /**/
        if (this._methodized) {
            return this._methodized
        }
        var L = this;
        return this._methodized = function () {
            var M = D([this], arguments);
            return L.apply(null, M)
        }
    }

    return {
        curry: J, /**/
        methodize: B /**/
    }
})());

Object.extend(String.prototype, (function () {
    function camelize() {/**/
        var parts = this.split("-"), len = parts.length;
        if (len == 1) {
            return parts[0]
        }
        var camelized = this.charAt(0) == "-" ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1) : parts[0];
        for (var i = 1; i < len; i++) {
            camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1)
        }
        return camelized
    }

    function include(pattern) { /**/
        return this.indexOf(pattern) > -1
    }

    return {
        camelize: camelize,/**/
        include: include /**/
    }
})());

var Enumerable = (function () {
    function C(Y, X) { /**/
        var W = 0;
        try {
            this._each(function (a) {
                Y.call(X, a, W++)
            })
        } catch (Z) {
            if (Z != $break) {
                throw Z
            }
        }
        return this
    }

    function R(Z, Y, X) {
        var W = -Z, a = [], b = this.toArray();
        if (Z < 1) {
            return b
        }
        while ((W += Z) < b.length) {
            a.push(b.slice(W, W + Z))
        }
        return a.collect(Y, X)
    }

    function B(Y, X) {
        Y = Y || Prototype.K;
        var W = true;
        this.each(function (a, Z) {
            W = W && !!Y.call(X, a, Z);
            if (!W) {
                throw $break
            }
        });
        return W
    }

    function I(Y, X) {
        Y = Y || Prototype.K;
        var W = false;
        this.each(function (a, Z) {
            if (W = !!Y.call(X, a, Z)) {
                throw $break
            }
        });
        return W
    }

    function J(Y, X) {
        Y = Y || Prototype.K;
        var W = [];
        this.each(function (a, Z) {
            W.push(Y.call(X, a, Z))
        });
        return W
    }

    function T(Y, X) { /**/
        var W;
        this.each(function (a, Z) {
            if (Y.call(X, a, Z)) {
                W = a;
                throw $break
            }
        });
        return W
    }

    function H(Y, X) {
        var W = [];
        this.each(function (a, Z) {
            if (Y.call(X, a, Z)) {
                W.push(a)
            }
        });
        return W
    }

    function G(Z, Y, X) {
        Y = Y || Prototype.K;
        var W = [];
        if (Object.isString(Z)) {
            Z = new RegExp(RegExp.escape(Z))
        }
        this.each(function (b, a) {
            if (Z.match(b)) {
                W.push(Y.call(X, b, a))
            }
        });
        return W
    }

    function A(W) { /**/
        if (Object.isFunction(this.indexOf)) {
            if (this.indexOf(W) != -1) {
                return true
            }
        }
        var X = false;
        this.each(function (Y) {
            if (Y == W) {
                X = true;
                throw $break
            }
        });
        return X
    }

    function Q(X, W) {
        W = Object.isUndefined(W) ? null : W;
        return this.eachSlice(X, function (Y) {
            while (Y.length < X) {
                Y.push(W)
            }
            return Y
        })
    }

    function L(W, Y, X) { /**/
        this.each(function (a, Z) {
            W = Y.call(X, W, a, Z)
        });
        return W
    }

    function V(X) {
        var W = $A(arguments).slice(1);
        return this.map(function (Y) {
            return Y[X].apply(Y, W)
        })
    }

    function P(Y, X) {
        Y = Y || Prototype.K;
        var W;
        this.each(function (a, Z) {
            a = Y.call(X, a, Z);
            if (W == null || a >= W) {
                W = a
            }
        });
        return W
    }

    function N(Y, X) {
        Y = Y || Prototype.K;
        var W;
        this.each(function (a, Z) {
            a = Y.call(X, a, Z);
            if (W == null || a < W) {
                W = a
            }
        });
        return W
    }

    function E(Z, X) {
        Z = Z || Prototype.K;
        var Y = [], W = [];
        this.each(function (b, a) {
            (Z.call(X, b, a) ? Y : W).push(b)
        });
        return [Y, W]
    }

    function F(X) { /**/
        var W = [];
        this.each(function (Y) {
            W.push(Y[X])
        });
        return W
    }

    function D(Y, X) {
        var W = [];
        this.each(function (a, Z) {
            if (!Y.call(X, a, Z)) {
                W.push(a)
            }
        });
        return W
    }

    function M(X, W) {
        return this.map(function (Z, Y) {
            return {value: Z, criteria: X.call(W, Z, Y)}
        }).sort(function (d, c) {
            var Z = d.criteria, Y = c.criteria;
            return Z < Y ? -1 : Z > Y ? 1 : 0
        }).pluck("value")
    }

    function O() {
        return this.map()
    }

    function S() {
        var X = Prototype.K, W = $A(arguments);
        if (Object.isFunction(W.last())) {
            X = W.pop()
        }
        var Y = [this].concat(W).map($A);
        return this.map(function (a, Z) {
            return X(Y.pluck(Z))
        })
    }

    function K() {
        return this.toArray().length
    }

    function U() {
        return "#<Enumerable:" + this.toArray().inspect() + ">"
    }

    return {
        each: C, /**/
        eachSlice: R,
        all: B,
        every: B,
        any: I,
        some: I,
        collect: J,
        map: J,
        detect: T,
        findAll: H,
        select: H,
        filter: H,
        grep: G,
        include: A, /**/
        member: A,
        inGroupsOf: Q,
        inject: L, /**/
        invoke: V,
        max: P,
        min: N,
        partition: E,
        pluck: F, /**/
        reject: D,
        sortBy: M,
        toArray: O,
        entries: O,
        zip: S,
        size: K,
        inspect: U,
        find: T /**/
    }
})();

function $A(C) {
    if (!C) {
        return []
    }
    if ("toArray" in Object(C)) {
        return C.toArray()
    }
    var B = C.length || 0, A = new Array(B);
    while (B--) {
        A[B] = C[B]
    }
    return A
}

(function () {
    var S = Array.prototype, M = S.slice, O = S.forEach;

    function B(W) {
        for (var V = 0, X = this.length; V < X; V++) {
            W(this[V])
        }
    }

    if (!O) {
        O = B
    }
    function L() {
        this.length = 0;
        return this
    }

    function D() {
        return this[0]
    }

    function G() {
        return this[this.length - 1]
    }

    function I() {
        return this.select(function (V) {
            return V != null
        })
    }

    function U() {
        return this.inject([], function (W, V) {
            if (Object.isArray(V)) {
                return W.concat(V.flatten())
            }
            W.push(V);
            return W
        })
    }

    function H() { /**/
        var V = M.call(arguments, 0);
        return this.select(function (W) {
            return !V.include(W)
        })
    }

    function F(V) {
        return (V !== false ? this : this.toArray())._reverse()
    }

    function K(V) {
        return this.inject([], function (Y, X, W) {
            if (0 == W || (V ? Y.last() != X : !Y.include(X))) {
                Y.push(X)
            }
            return Y
        })
    }

    function P(V) {
        return this.uniq().findAll(function (W) {
            return V.detect(function (X) {
                return W === X
            })
        })
    }

    function Q() {/**/
        return M.call(this, 0)
    }

    function J() {
        return this.length
    }

    function T() {
        return "[" + this.map(Object.inspect).join(", ") + "]"
    }

    function R() {
        var V = [];
        this.each(function (W) {
            var X = Object.toJSON(W);
            if (!Object.isUndefined(X)) {
                V.push(X)
            }
        });
        return "[" + V.join(", ") + "]"
    }

    function A(X, V) {
        V || (V = 0);
        var W = this.length;
        if (V < 0) {
            V = W + V
        }
        for (; V < W; V++) {
            if (this[V] === X) {
                return V
            }
        }
        return -1
    }

    function N(W, V) {
        V = isNaN(V) ? this.length : (V < 0 ? this.length + V : V) + 1;
        var X = this.slice(0, V).reverse().indexOf(W);
        return (X < 0) ? X : V - X - 1
    }

    function C() {
        var a = M.call(this, 0), Y;
        for (var W = 0, X = arguments.length; W < X; W++) {
            Y = arguments[W];
            if (Object.isArray(Y) && !("callee" in Y)) {
                for (var V = 0, Z = Y.length; V < Z; V++) {
                    a.push(Y[V])
                }
            } else {
                a.push(Y)
            }
        }
        return a
    }

    Object.extend(S, Enumerable);
    if (!S._reverse) {
        S._reverse = S.reverse
    }
    Object.extend(S, {
        _each: O,
        clear: L,
        first: D,
        last: G,
        compact: I,
        flatten: U,
        without: H, /**/
        reverse: F,
        uniq: K,
        intersect: P,
        clone: Q, /**/
        toArray: Q, /**/
        size: J,
        inspect: T,
        toJSON: R
    });
    var E = (function () {
        return [].concat(arguments)[0][0] !== 1
    })(1, 2);
    if (E) {
        S.concat = C
    }
    if (!S.indexOf) {
        S.indexOf = A
    }
    if (!S.lastIndexOf) {
        S.lastIndexOf = N
    }
})();

function $H(A) {/**/
    return new Hash(A)
}
var Hash = Class.create(Enumerable, (function () {
    function E(Q) {
        this._object = Object.isHash(Q) ? Q.toObject() : Object.clone(Q)
    }

    function F(R) {
        for (var Q in this._object) {
            var S = this._object[Q], T = [Q, S];
            T.key = Q;
            T.value = S;
            R(T)
        }
    }

    function K(Q, R) {
        return this._object[Q] = R
    }

    function C(Q) { /**/
        if (this._object[Q] !== Object.prototype[Q]) {
            return this._object[Q]
        }
    }

    function N(Q) {
        var R = this._object[Q];
        delete this._object[Q];
        return R
    }

    function P() {
        return Object.clone(this._object)
    }

    function O() {
        return this.pluck("key")
    }

    function M() {
        return this.pluck("value")
    }

    function G(R) {
        var Q = this.detect(function (S) {
            return S.value === R
        });
        return Q && Q.key
    }

    function I(Q) {
        return this.clone().update(Q)
    }

    function D(Q) {
        return new Hash(Q).inject(this, function (R, S) {
            R.set(S.key, S.value);
            return R
        })
    }

    function B(Q, R) {
        if (Object.isUndefined(R)) {
            return Q
        }
        return Q + "=" + encodeURIComponent(String.interpret(R))
    }

    function A() {
        return this.inject([], function (S, T) {
            var R = encodeURIComponent(T.key), Q = T.value;
            if (Q && typeof Q == "object") {
                if (Object.isArray(Q)) {
                    return S.concat(Q.map(B.curry(R)))
                }
            } else {
                S.push(B(R, Q))
            }
            return S
        }).join("&")
    }

    function L() {
        return "#<Hash:{" + this.map(function (Q) {
            return Q.map(Object.inspect).join(": ")
        }).join(", ") + "}>"
    }

    function J() {
        return Object.toJSON(this.toObject())
    }

    function H() {
        return new Hash(this)
    }

    return {
        initialize: E,
        _each: F,
        set: K,
        get: C, /**/
        unset: N,
        toObject: P,
        toTemplateReplacements: P,
        keys: O,
        values: M,
        index: G,
        merge: I,
        update: D
    }
})());

/**/
function $$(B) {
    if (arguments.length > 1) {
        for (var A = 0, D = [], C = arguments.length; A < C; A++) {
            D.push($$(arguments[A]))
        }
        return D
    }
    if (Object.isString(B)) {
        B = document.getElementById(B)
    }
    return Element.extend(B)
}

Element.cache = {};
Element.idCounter = 1;
Element.Methods = { /**/
    getHeight: function (A) {
        return Element.getDimensions(A).height
    }, getWidth: function (A) {
        return Element.getDimensions(A).width
    }, classNames: function (A) {
        return new Element.ClassNames(A)
    }, getStyle: function (B, C) {
        B = $$(B);
        C = C == "float" ? "cssFloat" : C.camelize();
        var D = B.style[C];
        if (!D || D == "auto") {
            var A = document.defaultView.getComputedStyle(B, null);
            D = A ? A[C] : null
        }
        if (C == "opacity") {
            return D ? parseFloat(D) : 1
        }
        return D == "auto" ? null : D
    }, setStyle: function (B, C) {
        B = $$(B);
        var E = B.style, A;
        if (Object.isString(C)) {
            B.style.cssText += ";" + C;
            return C.include("opacity") ? B.setOpacity(C.match(/opacity:\s*(\d?\.?\d*)/)[1]) : B
        }
        for (var D in C) {
            if (D == "opacity") {
                B.setOpacity(C[D])
            } else {
                E[(D == "float" || D == "cssFloat") ? (Object.isUndefined(E.styleFloat) ? "cssFloat" : "styleFloat") : D] = C[D]
            }
        }
        return B
    }, getDimensions: function (C) {
        C = $$(C);
        var G = Element.getStyle(C, "display");
        if (G != "none" && G != null) {
            return {width: C.offsetWidth, height: C.offsetHeight}
        }
        var B = C.style;
        var F = B.visibility;
        var D = B.position;
        var A = B.display;
        B.visibility = "hidden";
        if (D != "fixed") {
            B.position = "absolute"
        }
        B.display = "block";
        var H = C.clientWidth;
        var E = C.clientHeight;
        B.display = A;
        B.position = D;
        B.visibility = F;
        return {width: H, height: E}
    }
};

Element.extend = (function () {
    function C(G) {
        if (typeof window.Element != "undefined") {
            var I = window.Element.prototype;
            if (I) {
                var K = "_" + (Math.random() + "").slice(2);
                var H = document.createElement(G);
                I[K] = "x";
                var J = (H[K] !== "x");
                delete I[K];
                H = null;
                return J
            }
        }
        return false
    }

    function B(H, G) {
        for (var J in G) {
            var I = G[J];
            if (Object.isFunction(I) && !(J in H)) {
                H[J] = I.methodize()
            }
        }
    }

    var D = C("object");
    if (Prototype.BrowserFeatures.SpecificElementExtensions) {
        if (D) {
            return function (H) {
                if (H && typeof H._extendedByPrototype == "undefined") {
                    var G = H.tagName;
                    if (G && (/^(?:object|applet|embed)$/i.test(G))) {
                        B(H, Element.Methods);
                        B(H, Element.Methods.Simulated);
                        B(H, Element.Methods.ByTag[G.toUpperCase()])
                    }
                }
                return H
            }
        }
        return Prototype.K
    }
    var A = {}, E = Element.Methods.ByTag;
    var F = Object.extend(function (I) {
        if (!I || typeof I._extendedByPrototype != "undefined" || I.nodeType != 1 || I == window) {
            return I
        }
        var G = Object.clone(A), H = I.tagName.toUpperCase();
        if (E[H]) {
            Object.extend(G, E[H])
        }
        B(I, G);
        I._extendedByPrototype = Prototype.emptyFunction;
        return I
    }, {
        refresh: function () {/**/
            if (!Prototype.BrowserFeatures.ElementExtensions) {
                Object.extend(A, Element.Methods);
                Object.extend(A, Element.Methods.Simulated)
            }
        }
    });
    F.refresh();
    return F
})();

/************/
Element.addMethods = function (C) {/**/
    var J = Prototype.BrowserFeatures, D = Element.Methods.ByTag;
    if (!C) {
        Object.extend(Form, Form.Methods);
        Object.extend(Form.Element, Form.Element.Methods);
        Object.extend(Element.Methods.ByTag, {
            FORM: Object.clone(Form.Methods),
            INPUT: Object.clone(Form.Element.Methods),
            SELECT: Object.clone(Form.Element.Methods),
            TEXTAREA: Object.clone(Form.Element.Methods)
        })
    }
    if (arguments.length == 2) {
        var B = C;
        C = arguments[1]
    }
    if (!B) {
        Object.extend(Element.Methods, C || {})
    } else {
        if (Object.isArray(B)) {
            B.each(H)
        } else {
            H(B)
        }
    }
    function H(F) {/**/
        F = F.toUpperCase();
        if (!Element.Methods.ByTag[F]) {
            Element.Methods.ByTag[F] = {}
        }
        Object.extend(Element.Methods.ByTag[F], C)
    }

    function A(M, L, F) {
        F = F || false;
        for (var O in M) {
            var N = M[O];
            if (!Object.isFunction(N)) {
                continue
            }
            if (!F || !(O in L)) {
                L[O] = N.methodize()
            }
        }
    }

    function E(N) {
        var F;
        var M = {
            OPTGROUP: "OptGroup",
            TEXTAREA: "TextArea",
            P: "Paragraph",
            FIELDSET: "FieldSet",
            UL: "UList",
            OL: "OList",
            DL: "DList",
            DIR: "Directory",
            H1: "Heading",
            H2: "Heading",
            H3: "Heading",
            H4: "Heading",
            H5: "Heading",
            H6: "Heading",
            Q: "Quote",
            INS: "Mod",
            DEL: "Mod",
            A: "Anchor",
            IMG: "Image",
            CAPTION: "TableCaption",
            COL: "TableCol",
            COLGROUP: "TableCol",
            THEAD: "TableSection",
            TFOOT: "TableSection",
            TBODY: "TableSection",
            TR: "TableRow",
            TH: "TableCell",
            TD: "TableCell",
            FRAMESET: "FrameSet",
            IFRAME: "IFrame"
        };
        if (M[N]) {
            F = "HTML" + M[N] + "Element"
        }
        if (window[F]) {
            return window[F]
        }
        F = "HTML" + N + "Element";
        if (window[F]) {
            return window[F]
        }
        F = "HTML" + N.capitalize() + "Element";
        if (window[F]) {
            return window[F]
        }
        var L = document.createElement(N);
        var O = L.__proto__ || L.constructor.prototype;
        L = null;
        return O
    }

    var I = window.HTMLElement ? HTMLElement.prototype : Element.prototype;
    if (J.ElementExtensions) {
        A(Element.Methods, I);
        A(Element.Methods.Simulated, I, true)
    }
    if (J.SpecificElementExtensions) {
        for (var K in Element.Methods.ByTag) {
            var G = E(K);
            if (Object.isUndefined(G)) {
                continue
            }
            A(D[K], G.prototype)
        }
    }
    Object.extend(Element, Element.Methods);
    delete Element.ByTag;
    if (Element.extend.refresh) {
        Element.extend.refresh()
    }
    Element.cache = {}
};

document.viewport = {/**/
    getDimensions: function () {
        return {width: this.getWidth(), height: this.getHeight()}
    }, getScrollOffsets: function () {
        return Element._returnOffset(window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop)
    }
};

(function (C) {/**/
    var H = Prototype.Browser, F = document, D, E = {};

    function A() {
        if (H.WebKit && !F.evaluate) {
            return document
        }
        if (H.Opera && window.parseFloat(window.opera.version()) < 9.5) {
            return document.body
        }
        return document.documentElement
    }

    function G(B) {
        if (!D) {
            D = A()
        }
        E[B] = "client" + B;
        C["get" + B] = function () {
            return D[E[B]]
        };
        return C["get" + B]()
    }

    C.getWidth = G.curry("Width");
    C.getHeight = G.curry("Height")
})(document.viewport);

Element.Storage = {UID: 1}; /**/

Element.addMethods({/**/
    getStorage: function (B) {/**/
        if (!(B = $$(B))) {
            return
        }
        var A;
        if (B === window) {
            A = 0
        } else {
            if (typeof B._prototypeUID === "undefined") {
                B._prototypeUID = [Element.Storage.UID++]
            }
            A = B._prototypeUID[0]
        }
        if (!Element.Storage[A]) {
            Element.Storage[A] = $H()
        }
        return Element.Storage[A]
    }, retrieve: function (C, B, A) { /**/
        if (!(C = $$(C))) {
            return
        }
        var E = Element.getStorage(C), D = E.get(B);
        if (Object.isUndefined(D)) {
            E.set(B, A);
            D = A
        }
        return D
    }
});

(function () {
    /**/
    var V = {
        KEY_BACKSPACE: 8,
        KEY_TAB: 9,
        KEY_RETURN: 13,
        KEY_ESC: 27,
        KEY_LEFT: 37,
        KEY_UP: 38,
        KEY_RIGHT: 39,
        KEY_DOWN: 40,
        KEY_DELETE: 46,
        KEY_HOME: 36,
        KEY_END: 35,
        KEY_PAGEUP: 33,
        KEY_PAGEDOWN: 34,
        KEY_INSERT: 45,
        cache: {}
    };

    var E = document.documentElement;
    var W = "onmouseenter" in E && "onmouseleave" in E; /**/

    var T = Object.keys(V.Methods).inject({}, function (X, Y) { /**/
        X[Y] = V.Methods[Y].methodize();
        return X
    });

    if (Prototype.Browser.IE) { /**/
        V.extend = function (Y, X) {
            if (!Y) {
                return false
            }
            if (Y._extendedByPrototype) {
                return Y
            }
            Y._extendedByPrototype = Prototype.emptyFunction;
            var Z = V.pointer(Y);
            Object.extend(Y, {target: Y.srcElement || X, relatedTarget: G(Y), pageX: Z.x, pageY: Z.y});
            return Object.extend(Y, T)
        }
    } else { /**/
        V.prototype = window.Event.prototype || document.createEvent("HTMLEvents").__proto__;
        Object.extend(V.prototype, T);
        V.extend = Prototype.K
    }

    function L(b, a, c) { /**/
        var Z = Element.retrieve(b, "prototype_event_registry");
        if (Object.isUndefined(Z)) {
            D.push(b);
            Z = Element.retrieve(b, "prototype_event_registry", $H())
        }
        var X = Z.get(a);
        if (Object.isUndefined(X)) {
            X = [];
            Z.set(a, X)
        }
        if (X.pluck("handler").include(c)) {
            return false
        }
        var Y;
        if (a.include(":")) {
            Y = function (d) {
                if (Object.isUndefined(d.eventName)) {
                    return false
                }
                if (d.eventName !== a) {
                    return false
                }
                V.extend(d, b);
                c.call(b, d)
            }
        } else {
            if (!W && (a === "mouseenter" || a === "mouseleave")) {
                if (a === "mouseenter" || a === "mouseleave") {
                    Y = function (f) {
                        V.extend(f, b);
                        var d = f.relatedTarget;
                        while (d && d !== b) {
                            try {
                                d = d.parentNode
                            } catch (g) {
                                d = b
                            }
                        }
                        if (d === b) {
                            return
                        }
                        c.call(b, f)
                    }
                }
            } else {
                Y = function (d) {
                    V.extend(d, b);
                    c.call(b, d)
                }
            }
        }
        Y.handler = c;
        X.push(Y);
        return Y
    }


    var D = []; /**/
    var J = Prototype.K; /**/
    function S(a, Z, b) {
        a = $$(a);
        var Y = L(a, Z, b);
        if (!Y) {
            return a
        }
        if (Z.include(":")) {
            if (a.addEventListener) {
                a.addEventListener("dataavailable", Y, false)
            } else {
                a.attachEvent("ondataavailable", Y);
                a.attachEvent("onfilterchange", Y)
            }
        } else {
            var X = J(Z);
            if (a.addEventListener) {
                a.addEventListener(X, Y, false)
            } else {
                a.attachEvent("on" + X, Y)
            }
        }
        return a
    }

    function I(c, a, d) {
        c = $$(c);
        var Z = Element.retrieve(c, "prototype_event_registry");
        if (Object.isUndefined(Z)) {
            return c
        }
        if (a && !d) {
            var b = Z.get(a);
            if (Object.isUndefined(b)) {
                return c
            }
            b.each(function (e) {
                Element.stopObserving(c, a, e.handler)
            });
            return c
        } else {
            if (!a) {
                Z.each(function (g) {
                    var e = g.key, f = g.value;
                    f.each(function (h) {
                        Element.stopObserving(c, e, h.handler)
                    })
                });
                return c
            }
        }
        var b = Z.get(a);
        if (!b) {
            return
        }
        var Y = b.find(function (e) {
            return e.handler === d
        });
        if (!Y) {
            return c
        }
        var X = J(a);
        if (a.include(":")) {
            if (c.removeEventListener) {
                c.removeEventListener("dataavailable", Y, false)
            } else {
                c.detachEvent("ondataavailable", Y);
                c.detachEvent("onfilterchange", Y)
            }
        } else {
            if (c.removeEventListener) {
                c.removeEventListener(X, Y, false)
            } else {
                c.detachEvent("on" + X, Y)
            }
        }
        Z.set(a, b.without(Y));
        return c
    }

    function U(a, Z, Y, X) {
        a = $$(a);
        if (Object.isUndefined(X)) {
            X = true
        }
        if (a == document && document.createEvent && !a.dispatchEvent) {
            a = document.documentElement
        }
        var b;
        if (document.createEvent) {
            b = document.createEvent("HTMLEvents");
            b.initEvent("dataavailable", true, true)
        } else {
            b = document.createEventObject();
            b.eventType = X ? "ondataavailable" : "onfilterchange"
        }
        b.eventName = Z;
        b.memo = Y || {};
        if (document.createEvent) {
            a.dispatchEvent(b)
        } else {
            a.fireEvent(b.eventType, b)
        }
        return V.extend(b)
    }

    Object.extend(V, {fire: U, observe: S, stopObserving: I});
    Object.extend(document, {fire: U.methodize(), observe: S.methodize(), stopObserving: I.methodize(), loaded: false});
    if (window.Event) {
        Object.extend(window.Event, V)
    } else {
        window.Event = V
    }
})();
(function () {
    var D;

    function A() {
        if (document.loaded) {
            return;
        }
        if (D) {
            window.clearTimeout(D);
        }
        document.loaded = true;
        document.fire("dom:loaded");
    }
    Event.observe(window, "load", A)
})();